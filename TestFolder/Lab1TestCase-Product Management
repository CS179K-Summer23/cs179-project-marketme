Product Management üõ†Ô∏è


User Story: As a manager, I want to manually input, delete, and update product information in our system.
Priority: High 10
Estimated Cost: 2
________________

Test Cases:


JSON Structure Test  
1. Test that the JSON structure is correctly set up and can correctly handle all types of product information. (For Json, as long as no error when launching the tool)


Product Creation Function Test
1. Test if the function correctly accepts and processes product information.
2. Test if the function does not take in duplicates.


Product Deletion Function Test  
1.   Test if the function correctly removes a product from the 'database' JSON file based on product ID.
2.   Test the function with both valid and non-existing product IDs.



Product Update Function Test  
1.   Test if the function correctly updates a product in the 'database' JSON file based on product ID and new data.
2.   Test the function with both valid and invalid inputs.
3.   Test if the function leaves the database in a valid state after updating a product.


JSON File Handling Functions Test  
1.   Test the read function if it correctly fetches data from the 'database' JSON file.
2.   Test the write function if it correctly writes data to the 'database' JSON file.
3.   Test if these functions handle errors correctly, e.g., when the file does not exist.


Input Validation Test  
1.   Test that the validation code correctly checks for and handles invalid data.
2.   Test if the validation function returns correct responses for both valid and invalid inputs.
3.   Test the behavior of the system when empty strings or invalid product IDs are inserted.


Fetch Product Function Test  
1.   Test if the function correctly fetches a product from the 'database' JSON file based on product ID.
2.   Test the function with both valid and non-existing product IDs.


User Interface Test  
1.   Test that the user interface correctly displays data.
2.   Test that the user interface correctly takes input and triggers the right functions.
3.   Test that the user interface handles errors correctly, e.g., when the user input is invalid or when there's a problem with the JSON 'database' file.
